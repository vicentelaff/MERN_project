{"version":3,"sources":["shared/components/UIElements/Card.js","shared/components/UIElements/Map.js","places/components/PlaceItem.js","places/components/PlaceList.js","places/pages/UserPlaces.js"],"names":["Card","props","className","style","children","Map","mapRef","useRef","center","zoom","useEffect","map","window","google","maps","current","Marker","position","ref","PlaceItem","useHttpClient","isLoading","error","sendRequest","clearError","auth","useContext","AuthContext","useState","showMap","setShowMap","showConfirmModal","setShowConfirmModal","closeMapHandler","cancelDeleteHandler","confirmDeleteHandler","a","process","id","Authorization","token","onDelete","err","Fragment","ErrorModal","onClear","Modal","show","onCancel","header","address","contentClass","footerClass","footer","Button","onClick","coordinates","inverse","danger","LoadingSpinner","asOverlay","src","image","alt","title","description","userId","creatorId","to","PlaceList","items","length","place","creator","location","onDeletePlace","UserPlaces","loadedPlaces","setLoadedPlaces","useParams","responseData","places","fetchPlaces","deletedPlaceId","prevPlaces","filter"],"mappings":"6GAAA,sBAYeA,IARF,SAAAC,GACX,OACE,qBAAKC,UAAS,eAAUD,EAAMC,WAAaC,MAAOF,EAAME,MAAxD,SACGF,EAAMG,a,8NCoBEC,EAvBH,SAAAJ,GACV,IAAMK,EAASC,mBAEPC,EAAiBP,EAAjBO,OAAQC,EAASR,EAATQ,KAahB,OAXAC,qBAAU,WACR,IAAMC,EAAM,IAAIC,OAAOC,OAAOC,KAAKT,IAAIC,EAAOS,QAAS,CACvDP,OAAQA,EACRC,KAAMA,IAGR,IAAIG,OAAOC,OAAOC,KAAKE,OAAO,CAACC,SAAUT,EAAQG,IAAKA,MACrD,CAACH,EAAQC,IAIH,qBAAKS,IAAKZ,EAAQJ,UAAS,sBAAyBC,MAAOF,EAAME,S,gCC2F3DgB,G,MAnGG,SAAClB,GACjB,MAAsDmB,cAA9CC,EAAR,EAAQA,UAAWC,EAAnB,EAAmBA,MAAOC,EAA1B,EAA0BA,YAAaC,EAAvC,EAAuCA,WACjCC,EAAOC,qBAAWC,KACxB,EAA8BC,oBAAS,GAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KACA,EAAgDF,oBAAS,GAAzD,mBAAOG,EAAP,KAAyBC,EAAzB,KAIMC,EAAkB,kBAAMH,GAAW,IAMnCI,EAAsB,WAC1BF,GAAoB,IAGhBG,EAAoB,uCAAG,sBAAAC,EAAA,sDAC3BJ,GAAoB,GACpB,IACET,EACEc,6CAAA,kBAA+CpC,EAAMqC,IACrD,SACA,KACA,CACEC,cAAe,UAAYd,EAAKe,QAGpCvC,EAAMwC,SAASxC,EAAMqC,IACrB,MAAOI,IAZkB,2CAAH,qDAe1B,OACE,eAAC,IAAMC,SAAP,WACE,cAACC,EAAA,EAAD,CAAYtB,MAAOA,EAAOuB,QAASrB,IACnC,cAACsB,EAAA,EAAD,CACEC,KAAMlB,EACNmB,SAAUf,EACVgB,OAAQhD,EAAMiD,QACdC,aAAa,4BACbC,YAAY,4BACZC,OAAQ,cAACC,EAAA,EAAD,CAAQC,QAAStB,EAAjB,mBANV,SAQE,qBAAK/B,UAAU,gBAAf,SACE,cAAC,EAAD,CAAKM,OAAQP,EAAMuD,YAAa/C,KAAM,SAG1C,cAACqC,EAAA,EAAD,CACEC,KAAMhB,EACNiB,SAAUd,EACVe,OAAO,sBACPG,YAAY,4BACZC,OACE,eAAC,IAAMV,SAAP,WACE,cAACW,EAAA,EAAD,CAAQG,SAAO,EAACF,QAASrB,EAAzB,oBAGA,cAACoB,EAAA,EAAD,CAAQI,QAAM,EAACH,QAASpB,EAAxB,uBAVN,SAgBE,8EAEF,oBAAIjC,UAAU,aAAd,SACE,eAACF,EAAA,EAAD,CAAME,UAAU,sBAAhB,UACGmB,GAAa,cAACsC,EAAA,EAAD,CAAgBC,WAAS,IACvC,qBAAK1D,UAAU,oBAAf,SACE,qBACE2D,IAAG,UAAKxB,yCAAL,YAAwCpC,EAAM6D,OACjDC,IAAK9D,EAAM+D,UAGf,sBAAK9D,UAAU,mBAAf,UACE,6BAAKD,EAAM+D,QACX,6BAAK/D,EAAMiD,UACX,4BAAIjD,EAAMgE,iBAEZ,sBAAK/D,UAAU,sBAAf,UACE,cAACoD,EAAA,EAAD,CAAQG,SAAO,EAACF,QA3EH,kBAAMzB,GAAW,IA2E9B,yBAGCL,EAAKyC,SAAWjE,EAAMkE,WACrB,cAACb,EAAA,EAAD,CAAQc,GAAE,kBAAanE,EAAMqC,IAA7B,kBAEDb,EAAKyC,SAAWjE,EAAMkE,WACrB,cAACb,EAAA,EAAD,CAAQI,QAAM,EAACH,QA9EM,WAC/BvB,GAAoB,IA6EV,iCChECqC,G,MA7BG,SAAApE,GAChB,OAA2B,IAAvBA,EAAMqE,MAAMC,OAEd,qBAAKrE,UAAU,oBAAf,SACE,eAACF,EAAA,EAAD,WACE,uEACA,cAACsD,EAAA,EAAD,CAAQc,GAAG,cAAX,8BAON,oBAAIlE,UAAU,aAAd,SACGD,EAAMqE,MAAM3D,KAAI,SAAA6D,GAAK,OACtB,cAAC,EAAD,CACElC,GAAIkC,EAAMlC,GACVwB,MAAOU,EAAMV,MACbE,MAAOQ,EAAMR,MACbC,YAAaO,EAAMP,YACnBf,QAASsB,EAAMtB,QACfiB,UAAWK,EAAMC,QACjBjB,YAAagB,EAAME,SACnBjC,SAAUxC,EAAM0E,eARFH,EAAMlC,WC0BXsC,UAxCI,WACjB,MAAwChD,qBAAxC,mBAAOiD,EAAP,KAAqBC,EAArB,KACA,EAAsD1D,cAA9CC,EAAR,EAAQA,UAAWC,EAAnB,EAAmBA,MAAOC,EAA1B,EAA0BA,YAAaC,EAAvC,EAAuCA,WAEjC0C,EAASa,cAAYb,OAE3BxD,qBAAU,YACS,uCAAG,4BAAA0B,EAAA,+EAEWb,EAAY,GAAD,OACjCc,6CADiC,wBACgB6B,IAHtC,OAEVc,EAFU,OAKhBF,EAAgBE,EAAaC,QALb,uGAAH,qDAQjBC,KACC,CAAC3D,EAAa2C,IAQjB,OACE,eAAC,IAAMvB,SAAP,WACE,cAACC,EAAA,EAAD,CAAYtB,MAAOA,EAAOuB,QAASrB,IAClCH,GACC,qBAAKnB,UAAU,SAAf,SACE,cAACyD,EAAA,EAAD,OAGFtC,GAAawD,GACb,cAAC,EAAD,CAAWP,MAAOO,EAAcF,cAfV,SAACQ,GAC3BL,GAAgB,SAACM,GAAD,OACdA,EAAWC,QAAO,SAACb,GAAD,OAAWA,EAAMlC,KAAO6C,WAK5C","file":"static/js/7.41819841.chunk.js","sourcesContent":["import React from 'react';\n\nimport './Card.css';\n\nconst Card = props => {\n  return (\n    <div className={`card ${props.className}`} style={props.style}>\n      {props.children}\n    </div>\n  );\n};\n\nexport default Card;\n","import React, { useRef, useEffect } from 'react';\r\n\r\nimport './Map.css';\r\n\r\nconst Map = props => {\r\n  const mapRef = useRef()\r\n\r\n  const { center, zoom } = props\r\n\r\n  useEffect(() => {\r\n    const map = new window.google.maps.Map(mapRef.current, {\r\n    center: center,\r\n    zoom: zoom\r\n  })\r\n\r\n  new window.google.maps.Marker({position: center, map: map})\r\n}, [center, zoom])\r\n\r\n  \r\n\r\n  return <div ref={mapRef} className={`map props.className`} style={props.style}>\r\n\r\n  </div>\r\n};\r\n\r\n// GoogleMaps API key: AIzaSyDzNnm8_5lu2swbeXkelDJB1X_mDWeQ6IY\r\n\r\nexport default Map;","import React, { useState, useContext } from \"react\";\r\n\r\nimport Card from \"../../shared/components/UIElements/Card\";\r\nimport Button from \"../../shared/components/FormElements/Button\";\r\nimport Modal from \"../../shared/components/UIElements/Modal\";\r\nimport Map from \"../../shared/components/UIElements/Map\";\r\nimport ErrorModal from \"../../shared/components/UIElements/ErrorModal\";\r\nimport LoadingSpinner from \"../../shared/components/UIElements/LoadingSpinner\";\r\nimport { AuthContext } from \"../../shared/context/auth-context\";\r\nimport { useHttpClient } from \"../../shared/hooks/http-hook\";\r\nimport \"./PlaceItem.css\";\r\n\r\nconst PlaceItem = (props) => {\r\n  const { isLoading, error, sendRequest, clearError } = useHttpClient();\r\n  const auth = useContext(AuthContext);\r\n  const [showMap, setShowMap] = useState(false);\r\n  const [showConfirmModal, setShowConfirmModal] = useState(false);\r\n\r\n  const openMapHandler = () => setShowMap(true);\r\n\r\n  const closeMapHandler = () => setShowMap(false);\r\n\r\n  const showDeleteWarningHandler = () => {\r\n    setShowConfirmModal(true);\r\n  };\r\n\r\n  const cancelDeleteHandler = () => {\r\n    setShowConfirmModal(false);\r\n  };\r\n\r\n  const confirmDeleteHandler = async () => {\r\n    setShowConfirmModal(false);\r\n    try {\r\n      sendRequest(\r\n        process.env.REACT_APP_BACKEND_URL + `/places/${props.id}`,\r\n        \"DELETE\",\r\n        null,\r\n        {\r\n          Authorization: \"Bearer \" + auth.token,\r\n        }\r\n      );\r\n      props.onDelete(props.id);\r\n    } catch (err) {}\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <ErrorModal error={error} onClear={clearError} />\r\n      <Modal\r\n        show={showMap}\r\n        onCancel={closeMapHandler}\r\n        header={props.address}\r\n        contentClass=\"place-item__modal-content\"\r\n        footerClass=\"place-item__modal-actions\"\r\n        footer={<Button onClick={closeMapHandler}>CLOSE</Button>}\r\n      >\r\n        <div className=\"map-container\">\r\n          <Map center={props.coordinates} zoom={16} />\r\n        </div>\r\n      </Modal>\r\n      <Modal\r\n        show={showConfirmModal}\r\n        onCancel={cancelDeleteHandler}\r\n        header=\"Delete confirmation\"\r\n        footerClass=\"place-item__modal-actions\"\r\n        footer={\r\n          <React.Fragment>\r\n            <Button inverse onClick={cancelDeleteHandler}>\r\n              CANCEL\r\n            </Button>\r\n            <Button danger onClick={confirmDeleteHandler}>\r\n              DELETE\r\n            </Button>\r\n          </React.Fragment>\r\n        }\r\n      >\r\n        <p>Are you sure you want to delete this place?</p>\r\n      </Modal>\r\n      <li className=\"place-item\">\r\n        <Card className=\"place-item__content\">\r\n          {isLoading && <LoadingSpinner asOverlay />}\r\n          <div className=\"place-item__image\">\r\n            <img\r\n              src={`${process.env.REACT_APP_ASSET_URL}/${props.image}`}\r\n              alt={props.title}\r\n            />\r\n          </div>\r\n          <div className=\"place-item__info\">\r\n            <h2>{props.title}</h2>\r\n            <h3>{props.address}</h3>\r\n            <p>{props.description}</p>\r\n          </div>\r\n          <div className=\"place-item__actions\">\r\n            <Button inverse onClick={openMapHandler}>\r\n              VIEW ON MAP\r\n            </Button>\r\n            {auth.userId === props.creatorId && (\r\n              <Button to={`/places/${props.id}`}>EDIT</Button>\r\n            )}\r\n            {auth.userId === props.creatorId && (\r\n              <Button danger onClick={showDeleteWarningHandler}>\r\n                DELETE\r\n              </Button>\r\n            )}\r\n          </div>\r\n        </Card>\r\n      </li>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default PlaceItem;\r\n","import React from 'react';\r\n\r\nimport Card from '../../shared/components/UIElements/Card';\r\nimport PlaceItem from './PlaceItem';\r\nimport Button from '../../shared/components/FormElements/Button';\r\nimport './PlaceList.css';\r\n\r\nconst PlaceList = props => {\r\n  if (props.items.length === 0) {\r\n    return (\r\n    <div className=\"place-list center\">\r\n      <Card>\r\n        <h2>No places found. Go create a new one!</h2>\r\n        <Button to='/places/new'>Share Place</Button>\r\n      </Card>\r\n    </div>\r\n    )\r\n  }\r\n\r\n  return (\r\n  <ul className=\"place-list\">\r\n    {props.items.map(place => (\r\n    <PlaceItem key={place.id} \r\n      id={place.id} \r\n      image={place.image} \r\n      title={place.title} \r\n      description={place.description} \r\n      address={place.address} \r\n      creatorId={place.creator} \r\n      coordinates={place.location}\r\n      onDelete={props.onDeletePlace}\r\n    />))}\r\n  </ul>\r\n  )\r\n};\r\n\r\nexport default PlaceList;","import React, { useEffect, useState } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\n\r\nimport PlaceList from \"../components/PlaceList\";\r\nimport ErrorModal from \"../../shared/components/UIElements/ErrorModal\";\r\nimport LoadingSpinner from \"../../shared/components/UIElements/LoadingSpinner\";\r\nimport { useHttpClient } from \"../../shared/hooks/http-hook\";\r\n\r\nconst UserPlaces = () => {\r\n  const [loadedPlaces, setLoadedPlaces] = useState();\r\n  const { isLoading, error, sendRequest, clearError } = useHttpClient();\r\n\r\n  const userId = useParams().userId;\r\n\r\n  useEffect(() => {\r\n    const fetchPlaces = async () => {\r\n      try {\r\n        const responseData = await sendRequest(\r\n          `${process.env.REACT_APP_BACKEND_URL}/places/user/${userId}`\r\n        );\r\n        setLoadedPlaces(responseData.places);\r\n      } catch (err) {}\r\n    };\r\n    fetchPlaces();\r\n  }, [sendRequest, userId]);\r\n\r\n  const placeDeletedHandler = (deletedPlaceId) => {\r\n    setLoadedPlaces((prevPlaces) =>\r\n      prevPlaces.filter((place) => place.id !== deletedPlaceId)\r\n    );\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <ErrorModal error={error} onClear={clearError} />\r\n      {isLoading && (\r\n        <div className=\"center\">\r\n          <LoadingSpinner />\r\n        </div>\r\n      )}\r\n      {!isLoading && loadedPlaces && (\r\n        <PlaceList items={loadedPlaces} onDeletePlace={placeDeletedHandler} />\r\n      )}\r\n      ;\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default UserPlaces;\r\n"],"sourceRoot":""}